My Solutions:

1) Using Golden Ratio:
const fibonacci = function (range) {
  const fnumbers = [1];
  const goldenRatio = 1.618034;
  let number = 1;
  if (range < 0) return "OOPS";
  for (let i = 1; i < range; i++) {
    fnumbers.push(number);
    number = Math.round(number * goldenRatio);
  }
  return fnumbers[range - 1];
};

2) Using Fibonacci expression:
function fibonacci(n) {
  const sequence = [0, 1];
  if (n == 0) return sequence[0];
  else if (n >= 1) {
    let total = 0;
    for (let i = 2; i <= n; i++) {
      total = sequence[i - 1] + sequence[i - 2];
      sequence.push(total);
    }
    console.log(sequence);
    return sequence.at(-1);
  }
  return "OOPS";
}

3) Concise solution:
function fibonacci(number) {
  if (number < 0) return "OOPS";
  const fibSeq = [0, 1];
  for (let i = 1; i < number; i++) {
    const newNum = fibSeq[fibSeq.length - 1] + fibSeq[fibSeq.length - 2];
    fibSeq.push(newNum);
  }
  console.log(fibSeq);
  return fibSeq[number];
}



TOP Solution
const fibonacci = function(count) {
  if (count < 0) return "OOPS";
  if (count === 0) return 0;
  let a = 0;
  let b = 1;
  for (let i = 1; i < count; i++) {
    const temp = b;
    b = a + b;
    a = temp;
  }
  return b;
};
